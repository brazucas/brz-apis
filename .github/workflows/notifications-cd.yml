name: notifications cd

run-name: Deploy notifications to live by @${{ github.actor }}

on:
  workflow_dispatch:

jobs:
  terraform:
    env:
      working_path: apps/notifications
    runs-on: ubuntu-latest
    outputs:
      subnet_id: ${{ steps.get_subnet_id.outputs.stdout }}
      security_group_id: ${{ steps.get_security_group_id.outputs.stdout }}
      brz_vpn_private_ip: ${{ steps.get_brz_vpn_private_ip.outputs.stdout }}
      brz_vpn_public_ip: ${{ steps.get_brz_vpn_public_ip.outputs.stdout }}
      brz_vpc_nat_gateway_public_ip: ${{ steps.get_brz_vpc_nat_gateway_public_ip.outputs.stdout }}
      brz_vpc_nat_gateway_private_ip: ${{ steps.get_brz_vpc_nat_gateway_private_ip.outputs.stdout }}
    steps:
      - name: Clone the repository code
        uses: actions/checkout@v2
      - name: Setup the Terraform CLI
        uses: hashicorp/setup-terraform@v2
      - name: Setup AWS Credentials
        run: |
          mkdir ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          AWS_PROFILE=default && echo AWS_PROFILE=$AWS_PROFILE >> $GITHUB_ENV
      - name: Initialize the Terraform working directory
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: init
        run: terraform init -input=false
      - name: Apply the Terraform execution plan
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: plan
        run: terraform apply -no-color -auto-approve
        env:
          TF_VAR_github_pat: ${{ secrets.GH_PAT }}
      - name: get subnet id
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: get_subnet_id
        run: terraform output --raw brz_vpc_private_subnet_0_id
      - name: security group id
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: get_security_group_id
        run: terraform output --raw notifications_sg_id
      - name: brz vpn private ip
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: get_brz_vpn_private_ip
        run: terraform output --raw brz_vpn_private_ip
      - name: brz vpn public ip
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: get_brz_vpn_public_ip
        run: terraform output --raw brz_vpn_public_ip
      - name: brz vpc nat gateway public ip
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: get_brz_vpc_nat_gateway_public_ip
        run: terraform output --raw brz_vpc_nat_gateway_public_ip
      - name: brz vpc nat gateway private ip
        working-directory: ${{ env.working_path }}/.cicd/terraform
        id: get_brz_vpc_nat_gateway_private_ip
        run: terraform output --raw brz_vpc_nat_gateway_private_ip

  build_and_deploy:
    name: Build project and Deploy
    runs-on: ubuntu-latest
    environment: notifications-production
    needs: terraform
    env:
      working_path: apps/notifications
      domain_name: notifications.brz.gg
    steps:
      - name: Clone the repository code
        uses: actions/checkout@v2
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with: 
          node-version: 18.x
      - name: Build project
        run: |
          yarn install
          yarn build
        working-directory: ${{ env.working_path }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      - name: Create .env file
        run: |
          echo "MAX_CODES=3" >> .env
          echo "WAITING_TIME_AFTER_MAX_CODES=900" >> .env
          echo "EMAIL_SOURCE=admin@brz.gg" >> .env
          echo "NODE_ENV=production" >> .env
          echo "SLS_IP_ALLOWLIST=${{ needs.terraform.outputs.brz_vpn_private_ip }},${{ needs.terraform.outputs.brz_vpn_public_ip }},${{ needs.terraform.outputs.brz_vpc_nat_gateway_public_ip }},${{ needs.terraform.outputs.brz_vpc_nat_gateway_private_ip }}" >> .env
          echo "SLS_LAMBDA_ROLE=${{ secrets.AWS_LAMBDA_ROLE_ARN }}" >> .env
          echo "SLS_VPC_SG_ID=${{ needs.terraform.outputs.security_group_id }}" >> .env
          echo "SLS_VPC_SUBNET_ID=${{ needs.terraform.outputs.subnet_id }}" >> .env
          echo "SLS_DOMAIN_NAME=${{ env.domain_name }}" >> .env
        working-directory: ${{ env.working_path }}
      - name: serverless deploy
        uses: serverless/github-action@v3.2
        with:
          args: -c "cd ./${{ env.working_path }} && serverless deploy"
          entrypoint: /bin/sh
